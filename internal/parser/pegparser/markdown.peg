{
package pegparser

type Markdown struct {
    Lines []string
}

func convertToStrings(data []interface{}) ([]string, error) {
    var result []string
    for _, v := range data {
        if str, ok := v.(string); ok {
            result = append(result, str)
        } else {
            return []string{}, errors.New(fmt.Sprintf("Warning: Non-string value encountered: %v\n", v))
        }
    }
    return result, nil
}

func convertToString(data []interface{}) (string, error) {
    sArr, err := convertToStrings(data)
    if err != nil {
        return "", err
    }
    return strings.Join(sArr, ""), nil
}
}

Markdown <- elements:(ElementBlankLine)* element:Element? EOF {
    elementsArr, ok := elements.([]any)
    if !ok {
        return "", errors.New("could not convert elements into []any")
    }
    elems, err := convertToStrings(elementsArr)
    if err != nil {
        return Markdown{}, err
    }

    var lines []string
    lines = append(lines, elems...)

    if element != nil {
        lines = append(lines, element.(string))
    }

    return Markdown{
        Lines: lines,
    }, nil
}

Element <- element:(Link / Heading / Paragraph) {
    return element.(string), nil
}

ElementBlankLine <- element:Element BlankLine {
    return element.(string), nil
}

Heading <- heading:Pound Spacing text:Text {
    level := len(heading.(string))
    if level > 0 && level < 7 {

        textStr, ok := text.(string)
        if !ok {
            return "", errors.New("could not convert text into string")
        }

        if textStr == "" {
            return "", nil
        }

        return fmt.Sprintf("<h%d>%s</h%d>", level, textStr, level), nil
    }
    return "<p>" + string(c.text) + "</p>", nil
}

Pound <- heading:("#")+ {
    return string(c.text), nil
}

Paragraph <- text:(MultilineText / Text) {
    if strings.TrimSpace(string(c.text)) == "" {
        return "", nil
    }
    return "<p>" + text.(string) + "</p>", nil
}

MultilineText <- text1:Text Newline text2:Text {
    if text2.(string) == "" {
       return text1.(string), nil
    }
    return text1.(string) + "\n" + text2.(string), nil
}

Link <- "[" text:(LinkText / "") "]" "(" url:(URL / "") ")" {
    textStr := fmt.Sprintf("%v", text)
    urlStr := fmt.Sprintf("%v", url)

    if textStr == "[]" {
        return "", nil
    } else if urlStr == "[]" {
        return "<a href=\"\">" + textStr + "</a>", nil
    }

    return "<a href=\"" + urlStr + "\">" + textStr + "</a>", nil
}

Text <- text:(Link / NormalText)* {
    textArr, ok := text.([]any)
    if !ok {
        return "", errors.New("could not convert text into []any")
    }
    return convertToString(textArr)
}

NormalText <- (!"[" !"]" !"\n" .)+ {
    return string(c.text), nil
}

URL <- [^) \t\n]+  {
    return string(c.text), nil
}

LinkText <- [^\]]+  {
    return string(c.text), nil
}

BlankLine <- Newline+
Newline <- "\n"
Spacing <- [ \t]*
EOF <- !.